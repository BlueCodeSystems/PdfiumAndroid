buildscript {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.6.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'
    }
}

apply plugin: 'com.android.library'

// Configure group and version from gradle.properties
group = project.findProperty('GROUP') ?: 'com.github.mhiew'
version = project.findProperty('VERSION_NAME') ?: '1.9.2-SNAPSHOT'

android {
    namespace "com.shockwave.pdfium"
    compileSdk 35
    buildToolsVersion "35.0.0"

    defaultConfig {
        minSdk 28
        targetSdk 35
        versionCode (project.findProperty('VERSION_CODE')?.toString()?.toInteger() ?: 1)
        versionName (project.findProperty('VERSION_NAME') ?: version?.toString() ?: "unspecified")
        buildConfigField 'String', 'VERSION_NAME', "\"${defaultConfig.versionName}\""
    }
    buildFeatures {
        buildConfig true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path file("src/main/jni/Android.mk")
        }
    }

    sourceSets{
        main {
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }
}

repositories {
    mavenLocal()
    google()
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

// Maven Publishing
apply from: "${rootProject.projectDir}/maven.gradle"

// Optional: Auto local maven publish after build
if (project.hasProperty('autoLocalMaven') && project.property('autoLocalMaven').toString() == 'true') {
    tasks.matching { it.name in ['build', 'assembleRelease'] }.configureEach { finalizedBy 'publishToMavenLocal' }
}

// Zip release artifacts (AAR + POM + sources/javadoc)
import org.gradle.api.tasks.bundling.Zip

tasks.register("packageReleaseZip", Zip) {
    group = "distribution"
    description = "Packages release AAR, POM, sources and javadoc into a zip"
    dependsOn "assembleRelease", "sourcesJar", "javadocJar", "generatePomFileForMavenPublication"
    from("$buildDir/outputs/aar") { include "*-release.aar" }
    from("$buildDir/publications/maven") { include "pom-default.xml"; into("maven") }
    from("$buildDir/libs") { include "*-sources.jar", "*-javadoc.jar" }
    def artifactId = project.findProperty("POM_SETTING_ARTIFACT_ID") ?: project.name
    def versionName = (project.version?.toString()) ?: (project.findProperty("VERSION_NAME") ?: "unspecified")
    archiveBaseName.set(artifactId)
    archiveVersion.set(versionName)
    destinationDirectory.set(file("$buildDir/releasePackage"))
}
